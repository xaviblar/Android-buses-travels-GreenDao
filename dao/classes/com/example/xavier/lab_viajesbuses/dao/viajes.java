package com.example.xavier.lab_viajesbuses.dao;

import com.example.xavier.lab_viajesbuses.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "VIAJES".
 */
public class viajes {

    private Long id;
    private String matricula_bus;
    private String destino;
    private String pasajeros;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient viajesDao myDao;

    private buses buses;
    private String buses__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public viajes() {
    }

    public viajes(Long id) {
        this.id = id;
    }

    public viajes(Long id, String matricula_bus, String destino, String pasajeros) {
        this.id = id;
        this.matricula_bus = matricula_bus;
        this.destino = destino;
        this.pasajeros = pasajeros;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getViajesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMatricula_bus() {
        return matricula_bus;
    }

    public void setMatricula_bus(String matricula_bus) {
        this.matricula_bus = matricula_bus;
    }

    public String getDestino() {
        return destino;
    }

    public void setDestino(String destino) {
        this.destino = destino;
    }

    public String getPasajeros() {
        return pasajeros;
    }

    public void setPasajeros(String pasajeros) {
        this.pasajeros = pasajeros;
    }

    /** To-one relationship, resolved on first access. */
    public buses getBuses() {
        String __key = this.matricula_bus;
        if (buses__resolvedKey == null || buses__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            busesDao targetDao = daoSession.getBusesDao();
            buses busesNew = targetDao.load(__key);
            synchronized (this) {
                buses = busesNew;
            	buses__resolvedKey = __key;
            }
        }
        return buses;
    }

    public void setBuses(buses buses) {
        synchronized (this) {
            this.buses = buses;
            matricula_bus = buses == null ? null : buses.getMatricula();
            buses__resolvedKey = matricula_bus;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
