package com.example.xavier.lab_viajesbuses.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.xavier.lab_viajesbuses.dao.buses;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUSES".
*/
public class busesDao extends AbstractDao<buses, String> {

    public static final String TABLENAME = "BUSES";

    /**
     * Properties of entity buses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Matricula = new Property(0, String.class, "matricula", true, "MATRICULA");
        public final static Property Marca = new Property(1, String.class, "marca", false, "MARCA");
        public final static Property Modelo = new Property(2, String.class, "modelo", false, "MODELO");
    };


    public busesDao(DaoConfig config) {
        super(config);
    }
    
    public busesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUSES\" (" + //
                "\"MATRICULA\" TEXT PRIMARY KEY NOT NULL ," + // 0: matricula
                "\"MARCA\" TEXT," + // 1: marca
                "\"MODELO\" TEXT);"); // 2: modelo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUSES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, buses entity) {
        stmt.clearBindings();
 
        String matricula = entity.getMatricula();
        if (matricula != null) {
            stmt.bindString(1, matricula);
        }
 
        String marca = entity.getMarca();
        if (marca != null) {
            stmt.bindString(2, marca);
        }
 
        String modelo = entity.getModelo();
        if (modelo != null) {
            stmt.bindString(3, modelo);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public buses readEntity(Cursor cursor, int offset) {
        buses entity = new buses( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // matricula
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // marca
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // modelo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, buses entity, int offset) {
        entity.setMatricula(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMarca(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModelo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(buses entity, long rowId) {
        return entity.getMatricula();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(buses entity) {
        if(entity != null) {
            return entity.getMatricula();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
